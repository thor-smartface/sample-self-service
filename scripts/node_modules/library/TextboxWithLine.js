//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const TextView = extend(require('sf-core/ui/textview'));
const TextBox = extend(require('sf-core/ui/textbox'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}

//constructor
function TextboxWithLine(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "textboxInfo", $TextboxWithLine$$TextboxInfo_, this);
  addChild.call(this, "innerTextbox", $TextboxWithLine$$InnerTextbox_, this);
  addChild.call(this, "textboxBottomLine", $TextboxWithLine$$TextboxBottomLine_, this);
}
TextboxWithLine.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "RELATIVE"
    },
    height: 60,
    paddingLeft: null,
    paddingRight: null,
    width: 250
  }
};
const TextboxWithLine_ = FlexLayout(TextboxWithLine);

function $TextboxWithLine$$TextboxInfo(_super, pageInstance) {
  _super(this, {
    id: 100,
    text: ""
  });
  pageInstance.textboxInfo = this;
}
$TextboxWithLine$$TextboxInfo.$$styleContext = {
  classNames: ".label .label-login.small .label-textboxWithLine.normal",
  userProps: {
    height: 20,
    marginLeft: 10,
    marginRight: 10,
    width: null
  }
};
const $TextboxWithLine$$TextboxInfo_ = TextView($TextboxWithLine$$TextboxInfo);

function $TextboxWithLine$$InnerTextbox(_super, pageInstance) {
  _super(this, {
    id: 101,
    text: ""
  });
  pageInstance.innerTextbox = this;
}
$TextboxWithLine$$InnerTextbox.$$styleContext = {
  classNames: ".textBox",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1
    },
    height: null,
    marginLeft: 10,
    marginRight: 10,
    textColor: "rgba( 255, 255, 255, 1 )",
    width: null
  }
};
const $TextboxWithLine$$InnerTextbox_ = TextBox($TextboxWithLine$$InnerTextbox);

function $TextboxWithLine$$TextboxBottomLine(_super, pageInstance) {
  _super(this, {
    id: 102
  });
  pageInstance.textboxBottomLine = this;
}
$TextboxWithLine$$TextboxBottomLine.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    alpha: 0.4,
    backgroundColor: "rgba( 151, 151, 151, 1 )",
    flexProps: {
      flexGrow: null
    },
    height: 1,
    marginLeft: 10,
    marginRight: 10,
    width: null
  }
};
const $TextboxWithLine$$TextboxBottomLine_ = FlexLayout($TextboxWithLine$$TextboxBottomLine);

module && (module.exports = TextboxWithLine_);